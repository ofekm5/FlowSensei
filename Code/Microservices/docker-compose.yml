version: '3.7'
services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false  # Optional for disabling security
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - elk_network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.10.1
    container_name: logstash
    ports:
      - "5044:5044"
      - "9600:9600"
      - "2055:2055/udp"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
    networks:
      - elk_network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.1
    container_name: kibana
    environment:
      - server.cors.enabled=true
      - server.cors.allowOrigin="*"
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - elk_network

  postgres:
    image: postgres:14  
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydatabase
    volumes:
      - postgres_data:/var/lib/postgresql/data  
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydatabase"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  controller:
    build:
      context: ./Controller
    container_name: controller
    environment:
      - DB_URL=postgres://user:password@postgres:5432/mydatabase
      - JWT_SECRET=fd5ac1609d0f2d6a5b7c91385c09669f36137c427abdc4613b51c714ee47e9b6f8c4fd1f65d7bb2a79a00af7274aee19874c77148397aaaac82473eaadc4fc14
      - PORT=5000
      - EXCHANGE_NAME=requests_exchange
      - RABBIT_URL=amqp://user:password@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "5000:5000"
    networks:
      - app_network

  routerclient:
    build:
      context: ./RouterClient
    container_name: routerclient
    environment:
      - RABBIT_URL=amqp://user:password@rabbitmq:5672
      - EXCHANGE_NAME=requests_exchange
      - PORT=3000
      - HOUR_LIMIT_INTERVAL=3
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - app_network

  monitor:
    build:
      context: ./Monitor 
    container_name: monitor
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - KIBANA_URL=http://kibana:5601
      - PORT=7000
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672  
      - EXCHANGE_NAME=elk_exchange  
    depends_on:
      elasticsearch:
        condition: service_healthy
      logstash:
        condition: service_healthy
      kibana:
        condition: service_healthy
    ports:
      - "7000:7000"
    networks:
      - elk_network
      - app_network

  GUI:
    build:
      context: ./ReactApp  
    container_name: GUI
    environment:
      - NODE_ENV=development  
    ports:
      - "3001:3000"  
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local
  esdata:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  app_network:
    driver: bridge
  elk_network:
    driver: bridge