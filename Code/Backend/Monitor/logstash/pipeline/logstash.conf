input {
  udp {
    port => 2055
    codec => netflow {
      versions => [5, 9, 10]
    }
    type => "netflow"
  }
}

filter {
  if [type] == "netflow" {
    # Extract the router's source IP address
    mutate {
      replace => { "host" => "%{[netflow][ipv4_src_addr]}" }
    }

    mutate {
      convert => { "[netflow][protocol]" => "string" } # Convert to string if necessary
    }

    mutate {
      gsub => [
        "[netflow][protocol]", "2", "igmp",
        "[netflow][protocol]", "6", "tcp",
        "[netflow][protocol]", "17", "udp",
        "[netflow][protocol]", "47", "gre",
        "[netflow][protocol]", "50", "esp",
        "[netflow][protocol]", "51", "ah",
        "[netflow][protocol]", "58", "icmpv6",
        "[netflow][protocol]", "89", "ospf",
        "[netflow][protocol]", "132", "sctp"
      ]
    }

    # Rename NetFlow fields to match desired structure
    mutate {
      rename => {
        "[netflow][ipv4_src_addr]" => "srcAddress"
        "[netflow][ipv4_dst_addr]" => "dstAddress"
        "[netflow][l4_src_port]" => "srcPort"
        "[netflow][l4_dst_port]" => "dstPort"
        #"[netflow][protocol]" => "protocol"
      }
    }

    mutate {
      add_field => { "service" => "%{dstPort}" }
    }

    # Define service names based on destination port using gsub
    mutate {
      gsub => [
        "service", "^80$", "HTTP",
        "service", "^443$", "HTTPS",
        "service", "^53$", "DNS",
        "service", "^22$", "SSH",
        "service", "^25$", "SMTP",
        "service", "^110$", "POP3",
        "service", "^143$", "IMAP",
        "service", "^21$", "FTP",
        "service", "^20$", "FTP-DATA",
        "service", "^23$", "Telnet"
      ]
    }
  }
}

output {
  if [type] == "netflow" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "netflowkakikaki2"
    }
    stdout { codec => rubydebug }
  }
}