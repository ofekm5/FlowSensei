input {
  udp {
    port => 2055
    codec => netflow {
      versions => [5, 9, 10]
    }
    type => "netflow"
  }
}

filter {
  if [type] == "netflow" {
    # Extract the router's source IP address
    mutate {
      add_field => { "host" => "%{[netflow][ipv4_src_addr]}" }
    }

    # Rename Netflow fields to match desired structure
    mutate {
      rename => {
        "[netflow][ipv4_src_addr]" => "srcAddress"
        "[netflow][ipv4_dst_addr]" => "dstAddress"
        "[netflow][l4_src_port]" => "srcPort"
        "[netflow][l4_dst_port]" => "dstPort"
        "[netflow][protocol]" => "protocol"
      }
    }

    # Add a service field based on destination port
    mutate {
      add_field => { "service" => "%{dstPort}" }
    }

    # Define service names based on destination port using gsub
    mutate {
      gsub => [
        "service", "^80$", "HTTP",
        "service", "^443$", "HTTPS"
      ]
    }

    # Protocol mapping using gsub
    mutate {
      gsub => [
        "protocol", "^6$", "TCP",
        "protocol", "^17$", "UDP"
      ]
    }
  }
}

output {
  if [type] == "netflow" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "netflowlllllllllllll"
    }
    stdout { codec => rubydebug }
  }
}