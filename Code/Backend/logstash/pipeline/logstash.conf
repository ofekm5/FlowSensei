input {
  udp {
    port => 2055
    codec => netflow {
      versions => [5, 9, 10]
    }
    type => "netflow"
  }
}

filter {
  if [type] == "netflow" {
    # Extract the router's source IP address
    mutate {
      add_field => { "host" => "%{[netflow][ipv4_src_addr]}" }
    }

    # Rename Netflow fields to match desired structure
    mutate {
      rename => { "[netflow][ipv4_src_addr]" => "srcAddress" }
      rename => { "[netflow][ipv4_dst_addr]" => "dstAddress" }
      rename => { "[netflow][l4_src_port]" => "srcPort" }
      rename => { "[netflow][l4_dst_port]" => "dstPort" }
      rename => { "[netflow][protocol]" => "protocol" }
    }

    # Add a service field based on destination port
    mutate {
      add_field => { "service" => "%{[netflow][l4_dst_port]}" }
    }

    # Debugging - Print out the fields to verify the data structure
    stdout { codec => rubydebug }

    # Define service names based on destination port
    if [dstPort] == "80" {
      mutate {
        replace => { "service" => "HTTP" }
      }
    } else if [dstPort] == "443" {
      mutate {
        replace => { "service" => "HTTPS" }
      }
    }

    # Protocol mapping
    if [protocol] == "6" {  # Ensure protocol is evaluated as a string
      mutate {
        replace => { "protocol" => "TCP" }
      }
    } else if [protocol] == "17" {
      mutate {
        replace => { "protocol" => "UDP" }
      }
    }
  }
}

output {
  if [type] == "netflow" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "netflow-%{host}-%{+YYYY.MM.dd}"
    }
    stdout { codec => rubydebug }  # Output to console for debugging
  }
}
